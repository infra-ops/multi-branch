pipeline {
    agent { label 'ec2' }

    environment {
        git_url = "git@github.com:infra-ops/multi-branch.git"
        git_branch = "develop"
        sshKey = credentials('github_key') // Replace with your SSH key credentials ID
        BUILD_PATH = "${WORKSPACE}/properties"
        JENKINS_IP = "your_jenkins_ip" // Replace with your Jenkins IP
        ecr_user = "nik786"
        ecr_repo = "nik786/blue-flask"
        deployment_name = "blue-app"
        container_name = "simple-app"
        playbooks_path = "${WORKSPACE}/cloud_k8s_platform/on_prem/app_build_deployment/playbooks"
        py_docker_files = "${WORKSPACE}/cloud_k8s_platform/on_prem/app_build_deployment/app_build/python"

     
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: "${git_branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github_key', url: "git@github.com:infra-ops/multi-branch.git"]]])
                }
            }
        }

        stage('Maven Build App') {
            steps {
                dir(BUILD_PATH) {
                    script {
                        sh 'ls $BUILD_PATH'
                        sh 'mvn clean package'
                        
                    }
                }
            }
        }

        stage('Sonar Security Scan') {
            steps {
              dir(BUILD_PATH) { 
                script {
                    echo "Sonar Scan"
                    // Add SonarQube scanning steps here

                    // mvn install sonar:sonar -Dsonar.login=sqp_293beeee09048bf228799ea36209901a06c3d62d -f pom.xml
                   
                 }
                    
                }
            }
        }

        stage('Docker Build and Tag') {
            steps {
                script {
                    echo "Docker build and tag"
                    // Add Docker build and tagging steps here
                    //sh "docker build -t ${ecr_repo}:${env.BUILD_NUMBER} --pull=true --file=${py_docker_files}/appdockerfile ${py_docker_files}"
                }
            }
        }

        stage('Docker Scan') {
            steps {
                script {
                    echo "Docker scan"
                    // Add Docker scanning steps here
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    echo "Docker push"
                    // Add Docker push steps here
                    //sh "docker push ${ecr_repo}:${env.BUILD_NUMBER}"
                     
                }
            }
        }

        stage("Deploy Image to Dev") {
            steps {
                script {
                    echo "Deploying to dev"
                    // Add deployment steps here
                }
            }
        }

        stage("Test App in Dev") {
            steps {
                script {
                    echo "Test me"
                    // Add testing steps here
                }
            }
        }

        stage('Announce') {
            steps {
                script {
                    if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                        echo "Build successful!"
                    } else {
                        error "Build failed!"
                    }
                }
            }
        }
    }
}
