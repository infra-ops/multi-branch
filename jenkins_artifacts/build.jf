pipeline {
    node ('ec2') {
    
    environment {
        git_url = "git@github.com:infra-ops/multi-branch.git"
        git_branch = "develop"
        sshKey = credentials('github_key') // Replace with your SSH key credentials ID
        BUILD_PATH = "${WORKSPACE}/multi-branch"
        JENKINS_IP = "your_jenkins_ip" // Replace with your Jenkins IP
    }

    triggers {
        pollSCM('H/2 * * * *')
    }

    stages {
        stage("Tools initialization") {
            steps {
                script {
                    sh "mvn --version"
                    sh "java -version"
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: "${git_branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github_key', url: "${git_url}"]]])
                }
            }
        }

        stage("Run Test cases") {
            when {
                expression { BRANCH_NAME == 'develop' }
            }
            steps {
                stage('Maven Build App') {
                    steps {
                        dir(BUILD_PATH) {
                            sh "mvn clean package"
                        }
                    }
                }

                stage('Sonar Security Scan') {
                    steps {
                        dir(BUILD_PATH) {
                            sh 'mvn install sonar:sonar -Dsonar.token=sqp_c7e87a0f6be4bbe7c40f2bb7cbc88857671d6a0b'
                            //sh "mvn sonar:sonar -Dsonar.host.url=http://${JENKINS_IP}:9000"
                        }
                    }
                }

                stage('Docker Build and Tag') {
                    steps {
                        script {
                            sh 'docker build -t test-application:1.0.0 -f ${WORKSPACE}/Dockerfile .'
                            sh 'docker tag test-application:1.0.0 registry/microservices/test-application:1.0.0'
                        }
                    }
                }

                stage('Docker Scan') {
                    steps {
                        script {
                            sh 'trivy image'
                        }
                    }
                }

                stage('Docker Push') {
                    steps {
                        script {
                            sh 'docker login --username=username --password=password registry'
                            sh 'docker push registry/microservices/test-application:1.0.0'
                        }
                    }
                }

                stage("Deploy Image to Dev") {
                    steps {
                        sh "deploying to dev"
                    }
                }

                stage("Test App in Dev") {
                    steps {
                        sh 'test me'
                    }
                }

                stage("Check Code coverage") {
                    when {
                        expression { BRANCH_NAME == 'develop' }
                    }
                    steps {
                         sh 'testi'
                    }
                }

                stage("Build & Deploy Code") {
                    when {
                        expression { BRANCH_NAME == 'master' }
                    }
                    steps {
                        sh "deploy to prod"
                    }
                }
            }
        }

        stage('Docker image Clean') {
            steps {
                script {
                    try {
                        sh 'docker rmi -f $(docker images -q -f dangling=true)'
                    } catch (Exception e) {
                        echo 'No dangling images found. '
                    }
                }
            }
        }

        stage('Announce') {
            steps {
                script {
                    if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                        echo "Build successful!"
                    } else {
                        error "Build failed!"
                    }
                }
            }
        }
    }
}
